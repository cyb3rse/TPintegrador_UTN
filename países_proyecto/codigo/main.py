import csv   #Librer√≠a para leer archivos CSV

# -------------------------------------------------------
# üìå 1. FUNCI√ìN PARA LEER EL ARCHIVO CSV
# -------------------------------------------------------
def cargar_paises(nombre_archivo):
    paises = []  # Lista donde se guardar√°n todos los pa√≠ses
    try:
        with open(nombre_archivo, encoding='utf-8') as archivo:
            lector = csv.DictReader(archivo)  # Cada fila ser√° un diccionario
            for fila in lector:
                # Convertimos los n√∫meros a enteros (int)
                pais = {
                    'nombre': fila['nombre'],
                    'poblacion': int(fila['poblacion']),
                    'superficie': int(fila['superficie']),
                    'continente': fila['continente']
                }
                paises.append(pais)  # Agregamos el pa√≠s a la lista
    except FileNotFoundError:
        print("No se encontr√≥ el archivo CSV.")
    return paises

# -------------------------------------------------------
# üìå 2. FUNCI√ìN PARA BUSCAR UN PA√çS POR NOMBRE
# -------------------------------------------------------
def buscar_pais(paises, nombre):
    resultados = []
    for pais in paises:
        # Si el texto buscado est√° dentro del nombre (ignora may√∫sculas)
        if nombre.lower() in pais['nombre'].lower():
            resultados.append(pais)
    return resultados


# -------------------------------------------------------
# üìå 3. FUNCI√ìN PARA MOSTRAR ESTAD√çSTICAS B√ÅSICAS
# -------------------------------------------------------
def mostrar_estadisticas(paises):
    if not paises:
        print("No hay datos cargados.")
        return

    # Calculamos poblaci√≥n y superficie promedio
    total_poblacion = sum(p['poblacion'] for p in paises)
    total_superficie = sum(p['superficie'] for p in paises)
    promedio_poblacion = total_poblacion / len(paises)
    promedio_superficie = total_superficie / len(paises)

    # Buscamos pa√≠s con mayor y menor poblaci√≥n
    mayor = max(paises, key=lambda p: p['poblacion'])
    menor = min(paises, key=lambda p: p['poblacion'])

    print("\nüìä ESTAD√çSTICAS:")
    print(f"‚Ä¢ Pa√≠s con mayor poblaci√≥n: {mayor['nombre']} ({mayor['poblacion']})")
    print(f"‚Ä¢ Pa√≠s con menor poblaci√≥n: {menor['nombre']} ({menor['poblacion']})")
    print(f"‚Ä¢ Promedio de poblaci√≥n: {promedio_poblacion:,.0f}")
    print(f"‚Ä¢ Promedio de superficie: {promedio_superficie:,.0f}")


# -------------------------------------------------------
# üìå 4. MEN√ö PRINCIPAL
# -------------------------------------------------------
def menu():
    paises = cargar_paises('paises.csv')  # Cargamos los datos del CSV

    if not paises:
        return  # Si no hay datos, salimos del programa

    while True:
        print("\nüåé MEN√ö PRINCIPAL")
        print("1) Buscar pa√≠s por nombre")
        print("2) Mostrar estad√≠sticas")
        print("3) Salir")
        opcion = input("Elija una opci√≥n: ")

        if opcion == "1":
            texto = input("Ingrese el nombre o parte del nombre del pa√≠s: ")
            resultados = buscar_pais(paises, texto)
            if resultados:
                print("\nüîé Resultados encontrados:")
                for p in resultados:
                    print(f"{p['nombre']} - {p['continente']} - Poblaci√≥n: {p['poblacion']}")
            else:
                print("‚ùå No se encontr√≥ ning√∫n pa√≠s con ese nombre.")
        elif opcion == "2":
            mostrar_estadisticas(paises)
        elif opcion == "3":
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n no v√°lida. Intente otra vez.")


# -------------------------------------------------------
# üìå 5. PUNTO DE ENTRADA DEL PROGRAMA
# -------------------------------------------------------
if __name__ == "__main__":
    menu()  # Inicia el programa
